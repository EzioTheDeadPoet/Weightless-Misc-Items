using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Noggog;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;

namespace SlotsSlotsSlots
{
    class Program
    {
        static Lazy<Settings> _LazySettings = null!;
        static Settings Settings => _LazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _LazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "WeightlessMiscItems.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            float potionWeights = Settings.PotionSlotUse;
            float scrollWeights = Settings.ScrollSlotUse;
            bool noHealFromWeightless = Settings.WeightlessItemsOfferNoHealing;

            (HashSet<IFormLinkGetter<IMagicEffectGetter>> carryWeight, HashSet<IFormLinkGetter<IMagicEffectGetter>> health) magicEffects = MagicEffects(state);

            var carryWeightSpells = new HashSet<(Dictionary<FormKey, List<FormKey>> SpellAndEffects,Dictionary<FormKey,HashSet<int>> EffectAndMagnitudes)>();

            var SpellAndEffects = new Dictionary<FormKey, List<FormKey>>();
            var EffectAndMagnitudes = new Dictionary<FormKey, HashSet<int>>();            

            foreach (var m in state.LoadOrder.PriorityOrder.MiscItem().WinningOverrides())
            {
                if (m.Weight != 0.0f)
                {
                    var mn = m.DeepCopy();
                    mn.Weight = 0.0f;
                    state.PatchMod.MiscItems.Set(mn);
                }
            }

            foreach (var m in state.LoadOrder.PriorityOrder.Scroll().WinningOverrides())
            {
                if (m.Weight != 0.0f)
                {
                    var mn = m.DeepCopy();
                    mn.Weight = 0.0f;
                    state.PatchMod.Scrolls.Set(mn);
                }
            }

            foreach (var ingestible in state.LoadOrder.PriorityOrder.Ingestible().WinningOverrides())
            {
                var ingestibleCopy = ingestible.DeepCopy();
                if (ingestible.HasKeyword(Skyrim.Keyword.VendorItemPotion))
                {
                    ingestibleCopy.Weight = potionWeights;
                }
                else if (!ingestible.EditorID.Equals("dunSleepingTreeCampSap"))
                {
                    ingestibleCopy.Weight = 0.0f;
                }
                if (noHealFromWeightless)
                {
                    foreach (var healthEffect in magicEffects.health)
                    {
                        foreach (var e in ingestibleCopy.Effects)
                        {
                            if (healthEffect.Equals(e.BaseEffect)
                            &&
                            !(ingestible.HasKeyword(Skyrim.Keyword.VendorItemPotion)
                            || ingestible.EditorID.Equals("dunSleepingTreeCampSap")))
                            {
                                e.Data.Magnitude = 0;
                            }
                        }
                    }
                }

                state.PatchMod.Ingestibles.Set(ingestibleCopy);            
            }

            foreach (var ingredient in state.LoadOrder.PriorityOrder.Ingredient().WinningOverrides())
            {           
                var ingredientCopy = ingredient.DeepCopy();
                ingredientCopy.Weight = 0.0f;

                if (noHealFromWeightless)
                {
                    foreach (var healthMagicEffect in magicEffects.health)
                    {
                        foreach (var e in ingredientCopy.Effects)
                        {
                            if (healthMagicEffect.Equals(e.BaseEffect))
                            {
                                e.Data.Magnitude = 0;
                            }
                        }
                    }
                }
                state.PatchMod.Ingredients.Set(ingredientCopy);            
            }

            foreach (var m in state.LoadOrder.PriorityOrder.Book().WinningOverrides())
            {
                if (m.Weight != 0.0f)
                {
                    var mn = m.DeepCopy();
                    mn.Weight = 0.0f;
                    state.PatchMod.Books.Set(mn);
                }
            }

            foreach (var m in state.LoadOrder.PriorityOrder.Ammunition().WinningOverrides())
            {
                if (m.Weight != 0.0f)
                {
                    var mn = m.DeepCopy();
                    mn.Weight = 0.0f;
                    state.PatchMod.Ammunitions.Set(mn);
                }
            }

            foreach (var m in state.LoadOrder.PriorityOrder.SoulGem().WinningOverrides())
            {
                if (m.Weight != 0.0f)
                {
                    var mn = m.DeepCopy();
                    mn.Weight = 0.0f;
                    state.PatchMod.SoulGems.Set(mn);
                }
            }
        }

        private static (HashSet<IFormLinkGetter<IMagicEffectGetter>>, HashSet<IFormLinkGetter<IMagicEffectGetter>>) MagicEffects(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var foundCarryWeight = new HashSet<IFormLinkGetter<IMagicEffectGetter>>();
            var foundHealth = new HashSet<IFormLinkGetter<IMagicEffectGetter>>();
            foreach (var e in state.LoadOrder.PriorityOrder.MagicEffect().WinningOverrides())
            {
                if (e.Archetype.ActorValue.Equals(ActorValue.CarryWeight))
                {
                    foundCarryWeight.Add(e.AsLink());
                }
                if (e.Archetype.ActorValue.Equals(ActorValue.Health)
                    && !e.Flags.HasFlag(MagicEffect.Flag.Hostile)
                    && !e.Description.String.IsNullOrWhitespace())
                {
                    foundHealth.Add(e.AsLink());
                }
            }
            return (foundCarryWeight, foundHealth);
        }

    }
}
